name: Deploy to Preview

on:
    # called by pr-checks.yml only if on base repository (skips for forks)
    workflow_call:
        outputs:
            url:
                description: "The deployment URL from Vercel"
                value: ${{ jobs.deploy_preview.outputs.url }}
        secrets:
            VERCEL_TOKEN:
                required: true
            VERCEL_ORG_ID:
                required: true
            VERCEL_PROJECT_ID:
                required: true
            DATABASE_URL:
                required: true

    workflow_dispatch: # manual triggering for external fork PRs
        inputs:
            pr_number:
                description: "Pull Request Number"
                required: true
                type: number

permissions:
    contents: read
    deployments: write

# ensures only one deployment per ref/branch runs at a time
concurrency:
    group: deploy-preview-${{ github.ref }}
    cancel-in-progress: true

jobs:
    deploy_preview:
        timeout-minutes: 10
        name: Deploy to Preview
        runs-on: ubuntu-latest
        outputs:
            url: ${{ steps.deploy-preview.outputs.url }}
        environment:
            name: Preview
            url: ${{ steps.deploy-preview.outputs.url }}

        steps:
            - uses: actions/checkout@v4
              with:
                  # for workflow_dispatch (fork PRs), use PR number
                  # for workflow_call (base repo), use branch ref
                  ref: ${{ inputs.pr_number != null && format('refs/pull/{0}/merge', inputs.pr_number) || github.ref }}
                  repository: ${{ github.repository }}
                  token: ${{ secrets.GITHUB_TOKEN }}

            - name: Install Vercel CLI
              run: npm install --global vercel@latest

            - name: Link Vercel Project
              run: vercel link --yes --scope agvq --project mindvista --token=${{ secrets.VERCEL_TOKEN }}

            - name: Pull Vercel Environment Information
              run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

            - name: Pass Database Connection String From Neon To Vercel
              run: |
                  echo "Resetting environment variable POSTGRES_URL..."
                  vercel env rm POSTGRES_URL preview --yes --token=${{ secrets.VERCEL_TOKEN }}
                  echo "Adding environment variable POSTGRES_URL..."
                  vercel env add POSTGRES_URL preview --token=${{ secrets.VERCEL_TOKEN }} <<EOF
                  ${{ secrets.DATABASE_URL }}
                  EOF

            - name: Pull Vercel Environment Variables
              run: vercel env pull .env --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

            - name: Pull Vercel Environment Information
              run: vercel pull --yes --environment=preview --token=${{ secrets.VERCEL_TOKEN }}

            - name: Build Project Artifacts
              env:
                  POSTGRES_URL: ${{ secrets.DATABASE_URL }}
              run: vercel build --token=${{ secrets.VERCEL_TOKEN }}

            - name: Deploy Project Artifacts to Vercel
              id: deploy-preview
              env:
                  VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
                  VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
                  VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
                  POSTGRES_URL: ${{ secrets.DATABASE_URL }}

              run: |
                  DEPLOYMENT_URL=$(vercel deploy --prebuilt --token=${{ secrets.VERCEL_TOKEN }})
                  echo "url=$DEPLOYMENT_URL" >> $GITHUB_OUTPUT
