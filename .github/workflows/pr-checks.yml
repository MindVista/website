name: PR Checks

on:
    pull_request:
        branches:
            - "**"
    workflow_dispatch: # allows manual triggering from GitHub UI

permissions:
    contents: write
    deployments: write
    pull-requests: write
    issues: write

# ensures only one PR check per PR runs at a time
concurrency:
    group: pr-checks-${{ github.event.pull_request.number }}
    cancel-in-progress: true

jobs:
    validate_commits:
        name: Validate Commits
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  repository: ${{ github.event.pull_request.head.repo.full_name }}
                  ref: ${{ github.event.pull_request.head.ref }}
                  fetch-depth: 0 # fetch full history for commit linting

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "lts/*"
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Validate commit messages
              id: commitlint
              run: |
                  FROM_HASH=${{ github.event.before }}
                  TO_HASH=${{ github.event.after }}

                  if [ "$FROM_HASH" = "0000000000000000000000000000000000000000" ] || [ -z "$FROM_HASH" ]; then
                      echo "FROM_HASH is invalid or null. Using fallback."
                      BASE_BRANCH=${{ github.event.pull_request.base.ref }}
                      FROM_HASH=$(git merge-base HEAD origin/$BASE_BRANCH || git rev-parse HEAD^)
                  fi

                  echo "CommitLint from $FROM_HASH to $TO_HASH"
                  # run commitlint and capture both stdout and stderr
                  if OUTPUT=$(npx commitlint --from "$FROM_HASH" --to "$TO_HASH" --verbose 2>&1); then
                      echo "Commit messages follow guidelines"
                  else
                      ERR_CODE=$?
                      echo "Commit lint failed with output:"
                      echo "$OUTPUT"
                      echo
                      # store error for PR comment
                      echo "output<<EOF" >> $GITHUB_OUTPUT
                      echo "$OUTPUT" >> $GITHUB_OUTPUT
                      echo "EOF" >> $GITHUB_OUTPUT
                      exit $ERR_CODE
                  fi

            - name: Comment on PR to inform commit lint failure
              uses: actions/github-script@v7
              if: failure() && steps.commitlint.outcome == 'failure'
              with:
                  github-token: ${{secrets.GITHUB_TOKEN}}
                  script: |
                      const body = `Commit messages do not follow conventional commit guidelines.

                      \`\`\`
                      ${{ steps.commitlint.outputs.output }}
                      \`\`\`

                      Please see https://github.com/atlasgong/mindvista/wiki/Commit-Guidelines for more information.`;

                      await github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body
                      });

    check_formatting:
        name: Check Formatting
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "lts/*"
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Get changed files
              id: changed-files
              env:
                  PR_NUMBER: ${{ github.event.pull_request.number }}
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  # Use gh api to get all changed files with pagination
                  # see https://github.com/cli/cli/issues/5368#issuecomment-1344253654
                  FILES=$(gh api graphql -f query='
                    query($owner: String!, $repo: String!, $pr: Int!, $endCursor: String) {
                      repository(owner: $owner, name: $repo) {
                        pullRequest(number: $pr) {
                          files(first: 100, after: $endCursor) {
                            pageInfo{ hasNextPage, endCursor }
                            nodes {
                              path
                            }
                          }
                        }
                      }
                    }' -F owner=${{ github.repository_owner }} -F repo=${{ github.event.repository.name }} -F pr=$PR_NUMBER --paginate --jq '.data.repository.pullRequest.files.nodes.[].path')

                  # Convert newline-separated list to space-separated for Prettier
                  FILES_SPACE_SEPARATED=$(echo "$FILES" | tr '\n' ' ')
                  echo "all_changed_files=$FILES_SPACE_SEPARATED" >> $GITHUB_OUTPUT

            - name: Check Prettier formatting
              id: prettier
              env:
                  ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
              run: |
                  echo "Files needed to be checked:"
                  echo "${ALL_CHANGED_FILES}"

                  if [ -z "${ALL_CHANGED_FILES}" ]; then
                    echo "No files to check."
                    echo "needs_formatting=false" >> $GITHUB_ENV
                    exit 0
                  fi

                  # run prettier with --list-different
                  echo "Running prettier on changed files..."
                  for file in ${ALL_CHANGED_FILES}; do
                      echo -n "Checking $file..."
                      if [ ! -f "$file" ]; then
                          echo " ⚠️ skipping - file not found"
                          continue
                      fi
                      if OUTPUT=$(npx prettier --list-different --ignore-unknown "$file" 2>&1); then
                          echo " ✓ properly formatted"
                      else
                          # check if it's a parser error
                          if [[ $OUTPUT == *"No parser could be inferred"* ]]; then
                              echo " ⚠️ skipping - $OUTPUT"
                          else
                              echo " ✗ needs formatting"
                              FAILED_FILES="$FAILED_FILES$file"$'\n'
                          fi
                      fi
                  done

                  if [ -z "$FAILED_FILES" ]; then
                      echo "✓ All files are properly formatted"
                      echo "needs_formatting=false" >> $GITHUB_ENV
                  else
                      # strip trailing newlines
                      FAILED_FILES_CLEAN=$(echo "$FAILED_FILES" | sed -e 's/[[:space:]]*$//')
                      
                      echo "✗ The following files need formatting:"
                      echo "$FAILED_FILES_CLEAN"
                      echo
                      echo "needs_formatting=true" >> $GITHUB_ENV
                      echo "output<<EOF" >> $GITHUB_OUTPUT
                      echo "$FAILED_FILES_CLEAN" >> $GITHUB_OUTPUT
                      echo "EOF" >> $GITHUB_OUTPUT
                      exit 1
                  fi

            - name: Comment on PR to inform bad formatting
              uses: actions/github-script@v7
              if: failure() && steps.prettier.outcome == 'failure'
              with:
                  github-token: ${{secrets.GITHUB_TOKEN}}
                  script: |
                      const body = `Code formatting check failed.

                      The following files need formatting:
                      \`\`\`
                      ${{ steps.prettier.outputs.output }}
                      \`\`\`

                      Please run \`npx prettier --write .\` locally and recommit \`git commit -m \"refactor: format files with prettier\"\` to fix these formatting issues.`;

                      await github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body
                      });

    deploy_preview:
        # runs only for internal PRs, i.e. if PR's head repo is the same as the base repo
        # job is skipped otherwise, i.e. do not run for forked PRs
        # forked PRs require a workflow_trigger of deploy-preview.yml
        if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
        uses: ./.github/workflows/deploy-preview.yml
        secrets:
            VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
            VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
            VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}
