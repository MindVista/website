name: PR Checks

on:
    pull_request:
        branches:
            - "**"
    workflow_dispatch: # allows manual triggering from GitHub UI

permissions:
    contents: write
    deployments: write
    pull-requests: write
    issues: write

# ensures only one PR check per PR runs at a time
concurrency:
    group: pr-checks-${{ github.event.pull_request.number }}
    cancel-in-progress: true

jobs:
    validate_commits:
        timeout-minutes: 3
        name: Validate Commits
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  repository: ${{ github.event.pull_request.head.repo.full_name }}
                  ref: ${{ github.event.pull_request.head.ref }}
                  fetch-depth: 0 # fetch full history for commit linting

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "lts/*"
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Validate commit messages
              id: commitlint
              run: |
                  FROM_HASH=${{ github.event.before }}
                  TO_HASH=${{ github.event.after }}

                  if [ "$FROM_HASH" = "0000000000000000000000000000000000000000" ] || [ -z "$FROM_HASH" ]; then
                      echo "FROM_HASH is invalid or null. Using fallback."
                      BASE_BRANCH=${{ github.event.pull_request.base.ref }}
                      FROM_HASH=$(git merge-base HEAD origin/$BASE_BRANCH || git rev-parse HEAD^)
                  fi

                  echo "CommitLint from $FROM_HASH to $TO_HASH"
                  # run commitlint and capture both stdout and stderr
                  if OUTPUT=$(npx commitlint --from "$FROM_HASH" --to "$TO_HASH" --verbose 2>&1); then
                      echo "Commit messages follow guidelines"
                  else
                      ERR_CODE=$?
                      echo "Commit lint failed with output:"
                      echo "$OUTPUT"
                      echo
                      # store error for PR comment
                      echo "output<<EOF" >> $GITHUB_OUTPUT
                      echo "$OUTPUT" >> $GITHUB_OUTPUT
                      echo "EOF" >> $GITHUB_OUTPUT
                      exit $ERR_CODE
                  fi

            - name: Comment on PR to inform commit lint failure
              uses: actions/github-script@v7
              if: failure() && steps.commitlint.outcome == 'failure'
              with:
                  github-token: ${{secrets.GITHUB_TOKEN}}
                  script: |
                      const body = `Commit messages do not follow conventional commit guidelines.

                      \`\`\`
                      ${{ steps.commitlint.outputs.output }}
                      \`\`\`

                      Please see https://github.com/atlasgong/mindvista/wiki/Commit-Guidelines for more information.`;

                      await github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body
                      });

    check_formatting:
        timeout-minutes: 3
        name: Check Formatting
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "lts/*"
                  cache: "npm"

            - name: Install dependencies
              run: npm ci

            - name: Get changed files
              id: changed-files
              env:
                  PR_NUMBER: ${{ github.event.pull_request.number }}
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  # Use gh api to get all changed files with pagination
                  # see https://github.com/cli/cli/issues/5368#issuecomment-1344253654
                  FILES=$(gh api graphql -f query='
                    query($owner: String!, $repo: String!, $pr: Int!, $endCursor: String) {
                      repository(owner: $owner, name: $repo) {
                        pullRequest(number: $pr) {
                          files(first: 100, after: $endCursor) {
                            pageInfo{ hasNextPage, endCursor }
                            nodes {
                              path
                            }
                          }
                        }
                      }
                    }' -F owner=${{ github.repository_owner }} -F repo=${{ github.event.repository.name }} -F pr=$PR_NUMBER --paginate --jq '.data.repository.pullRequest.files.nodes.[].path')

                  # Convert newline-separated list to space-separated for Prettier
                  FILES_SPACE_SEPARATED=$(echo "$FILES" | tr '\n' ' ')
                  echo "all_changed_files=$FILES_SPACE_SEPARATED" >> $GITHUB_OUTPUT

            - name: Check Prettier formatting
              id: prettier
              env:
                  ALL_CHANGED_FILES: ${{ steps.changed-files.outputs.all_changed_files }}
              run: |
                  echo "Files needed to be checked:"
                  echo "${ALL_CHANGED_FILES}"

                  if [ -z "${ALL_CHANGED_FILES}" ]; then
                    echo "No files to check."
                    echo "needs_formatting=false" >> $GITHUB_ENV
                    exit 0
                  fi

                  # run prettier with --list-different
                  echo "Running prettier on changed files..."
                  for file in ${ALL_CHANGED_FILES}; do
                      echo -n "Checking $file..."
                      if [ ! -f "$file" ]; then
                          echo " ⚠️ skipping - file not found"
                          continue
                      fi
                      if OUTPUT=$(npx prettier --list-different --ignore-unknown "$file" 2>&1); then
                          echo " ✓ properly formatted"
                      else
                          # check if it's a parser error
                          if [[ $OUTPUT == *"No parser could be inferred"* ]]; then
                              echo " ⚠️ skipping - $OUTPUT"
                          else
                              echo " ✗ needs formatting"
                              FAILED_FILES="$FAILED_FILES$file"$'\n'
                          fi
                      fi
                  done

                  if [ -z "$FAILED_FILES" ]; then
                      echo "✓ All files are properly formatted"
                      echo "needs_formatting=false" >> $GITHUB_ENV
                  else
                      # strip trailing newlines
                      FAILED_FILES_CLEAN=$(echo "$FAILED_FILES" | sed -e 's/[[:space:]]*$//')
                      
                      echo "✗ The following files need formatting:"
                      echo "$FAILED_FILES_CLEAN"
                      echo
                      echo "needs_formatting=true" >> $GITHUB_ENV
                      echo "output<<EOF" >> $GITHUB_OUTPUT
                      echo "$FAILED_FILES_CLEAN" >> $GITHUB_OUTPUT
                      echo "EOF" >> $GITHUB_OUTPUT
                      exit 1
                  fi

            - name: Comment on PR to inform bad formatting
              uses: actions/github-script@v7
              if: failure() && steps.prettier.outcome == 'failure'
              with:
                  github-token: ${{secrets.GITHUB_TOKEN}}
                  script: |
                      const body = `Code formatting check failed.

                      The following files need formatting:
                      \`\`\`
                      ${{ steps.prettier.outputs.output }}
                      \`\`\`

                      Please run \`npx prettier --write .\` locally and recommit \`git commit -m \"refactor: format files with prettier\"\` to fix these formatting issues.`;

                      await github.rest.issues.createComment({
                        issue_number: context.issue.number,
                        owner: context.repo.owner,
                        repo: context.repo.repo,
                        body
                      });

    deploy_preview:
        # runs only for internal PRs, i.e. if PR's head repo is the same as the base repo
        # job is skipped otherwise, i.e. do not run for forked PRs
        # forked PRs require a workflow_trigger of deploy-preview.yml
        if: ${{ github.event.pull_request.head.repo.full_name == github.repository }}
        uses: ./.github/workflows/deploy-preview.yml
        secrets:
            VERCEL_TOKEN: ${{ secrets.VERCEL_TOKEN }}
            VERCEL_ORG_ID: ${{ secrets.VERCEL_ORG_ID }}
            VERCEL_PROJECT_ID: ${{ secrets.VERCEL_PROJECT_ID }}

    # create a [pr-number].staging.mindvista.ca redirect to the vercel preview deployment URL
    create_redirect_url:
        needs: deploy
        runs-on: ubuntu-latest
        env:
            DEPLOY_URL: ${{ needs.deploy.outputs.url }}
            PR_NUMBER: ${{ github.event.pull_request.number }}
        steps:
            - uses: actions/checkout@v4

            # store deployment URL for later cleanup
            - name: Store deployment URL
              run: |
                  printf '{"pr": "%s", "url": "%s"}\n' "${PR_NUMBER}" "${DEPLOY_URL}" > pr-deploy-mapping.json

            - uses: actions/upload-artifact@v4
              with:
                  name: pr-${PR_NUMBER}-deploy-url
                  path: pr-deploy-mapping.json
                  retention-days: 90

            - name: Create redirect rule
              env:
                  CLOUDFLARE_API_TOKEN: ${{ secrets.CLOUDFLARE_API_TOKEN }}
                  CLOUDFLARE_ZONE_ID: ${{ secrets.CLOUDFLARE_ZONE_ID }}
                  GH_TOKEN: ${{ secrets.GITHUB_TOKEN }}
              run: |
                  MIRROR_URL=${PR_NUMBER}.staging.mindvista.ca

                  if [ -z "$DEPLOY_URL" ]; then
                    echo "DEPLOY_URL is empty. Something went wrong in deploy step."
                    exit 1
                  fi

                  echo "Checking if redirect rule exists for ${MIRROR_URL}..."

                  # list existing rulesets, capture response and status code
                  RESPONSE=$(curl -s -w "\n%{http_code}" -X GET "https://api.cloudflare.com/client/v4/zones/${CLOUDFLARE_ZONE_ID}/rulesets" \
                    -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
                    -H "Content-Type: application/json")

                  # extract status code from last line
                  HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
                  # extract response body (everything except last line)
                  RESPONSE_BODY=$(echo "$RESPONSE" | sed \$d)

                  if [ "$HTTP_STATUS" -eq 200 ]; then
                      # check if PR preview ruleset exists
                      RULESET_ID=$(echo "$RESPONSE_BODY" | jq -r 'if .result then .result[] | select(.name == "PR Preview Redirects") | .id else empty end')
                      
                      if [ -z "$RULESET_ID" ]; then
                          echo "Creating PR preview ruleset..."
                          # create the ruleset
                          RESPONSE=$(curl -s -w "\n%{http_code}" -X POST "https://api.cloudflare.com/client/v4/zones/${CLOUDFLARE_ZONE_ID}/rulesets" \
                            -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
                            -H "Content-Type: application/json" \
                            --data '{
                              "name": "PR Preview Redirects",
                              "kind": "zone",
                              "phase": "http_request_dynamic_redirect",
                              "rules": []
                            }')

                          # extract status code from last line
                          HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
                          # extract response body (everything except last line)
                          RESPONSE_BODY=$(echo "$RESPONSE" | sed \$d)

                          if [ "$HTTP_STATUS" -eq 200 ]; then
                              RULESET_ID=$(echo "$RESPONSE_BODY" | jq -r '.result.id')
                          else
                              echo "Failed to create ruleset (HTTP ${HTTP_STATUS}):"
                              echo "$RESPONSE_BODY" | jq '.' || echo "$RESPONSE_BODY"
                              exit 1
                          fi
                      fi

                      # get current rules
                      RESPONSE=$(curl -s -w "\n%{http_code}" -X GET "https://api.cloudflare.com/client/v4/zones/${CLOUDFLARE_ZONE_ID}/rulesets/${RULESET_ID}" \
                        -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
                        -H "Content-Type: application/json")

                      # extract status code from last line
                      HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
                      # extract response body (everything except last line)
                      RESPONSE_BODY=$(echo "$RESPONSE" | sed \$d)

                      if [ "$HTTP_STATUS" -eq 200 ]; then
                          # check if rule for this PR exists
                          EXISTING_RULES=$(echo "$RESPONSE_BODY" | jq -r '.result.rules')
                          RULE_EXISTS=$(echo "$EXISTING_RULES" | jq -r 'if . then map(select(.description | contains("PR #'"${PR_NUMBER}"'"))) | length > 0 else false end')

                          if [ "$RULE_EXISTS" = "false" ]; then
                              echo "Adding redirect rule: ${MIRROR_URL} -> ${DEPLOY_URL}"

                              # construct new rule JSON safely
                              NEW_RULE=$(jq -n \
                                --arg expr "http.host eq \"${MIRROR_URL}\"" \
                                --arg desc "Preview deployment for PR #${PR_NUMBER}. Generated by GitHub Actions." \
                                --arg url "${DEPLOY_URL}" \
                                '{
                                  "expression": $expr,
                                  "description": $desc,
                                  "enabled": true,
                                  "action": "redirect",
                                  "action_parameters": {
                                    "from_value": {
                                      "target_url": {
                                        "value": $url
                                      },
                                      "status_code": 301,
                                      "preserve_query_string": true
                                    }
                                  }
                                }')

                              # add new rule to existing rules
                              NEW_RULES=$(echo "$EXISTING_RULES" | jq ". + [$NEW_RULE]")

                              # update ruleset with new rules
                              RESPONSE=$(curl -s -w "\n%{http_code}" -X PUT "https://api.cloudflare.com/client/v4/zones/${CLOUDFLARE_ZONE_ID}/rulesets/${RULESET_ID}" \
                                -H "Authorization: Bearer ${CLOUDFLARE_API_TOKEN}" \
                                -H "Content-Type: application/json" \
                                --data "$(jq -n --argjson rules "$NEW_RULES" '{"rules": $rules}')")

                              # extract status code from last line
                              HTTP_STATUS=$(echo "$RESPONSE" | tail -n1)
                              # extract response body (everything except last line)
                              RESPONSE_BODY=$(echo "$RESPONSE" | sed \$d)

                              if [ "$HTTP_STATUS" -eq 200 ]; then
                                  SUCCESS=$(echo "$RESPONSE_BODY" | jq -r '.success')
                                  if [ "$SUCCESS" = "true" ]; then
                                      echo "Successfully created redirect rule for PR #${PR_NUMBER}."

                                      echo "Posting comment to PR..."
                                      gh pr comment ${PR_NUMBER} --body "🚀 Preview deployment is ready [here](https://${PR_NUMBER}.staging.mindvista.ca)." || echo "ERROR: Failed to comment on PR. Skipping..."
                                  else
                                      echo "Failed to create redirect rule (API reported failure):"
                                      echo "$RESPONSE_BODY" | jq '.'
                                      exit 1
                                  fi
                              else
                                  echo "Failed to create redirect rule (HTTP ${HTTP_STATUS}):"
                                  echo "$RESPONSE_BODY" | jq '.' || echo "$RESPONSE_BODY"
                                  exit 1
                              fi
                          else
                              echo "Redirect rule already exists. Skipping creation and comment."
                          fi
