name: PR Checks

on:
    pull_request:
        branches:
            - "**"

permissions:
    contents: write

# ensures only one PR check per PR runs at a time
concurrency:
    group: pr-${{ github.event.pull_request.number }}
    cancel-in-progress: true

jobs:
    pr_checks:
        name: PR Checks
        runs-on: ubuntu-latest
        steps:
            - uses: actions/checkout@v4
              with:
                  repository: ${{ github.event.pull_request.head.repo.full_name }}
                  ref: ${{ github.event.pull_request.head.ref }}
                  fetch-depth: 0 # fetch full history for commit linting

            - name: Set up Node.js
              uses: actions/setup-node@v4
              with:
                  node-version: "lts/*"

            - name: Cache npm cache
              id: cache-npm
              uses: actions/cache@v4
              with:
                  path: ~/.npm
                  key: ${{ runner.os }}-npm-${{ hashFiles('**/package-lock.json') }}
                  restore-keys: |
                      ${{ runner.os }}-npm-

            - name: Install dependencies
              run: npm ci

            # Step 1: Lint Commits
            - name: Validate commit messages
              run: |
                  FROM_HASH=${{ github.event.before }}
                  TO_HASH=${{ github.event.after }}

                  if [ "$FROM_HASH" = "0000000000000000000000000000000000000000" ] || [ -z "$FROM_HASH" ]; then
                    echo "FROM_HASH is invalid or null. Using fallback."
                    FROM_HASH=$(git merge-base HEAD origin/master || git rev-parse HEAD^)
                  fi

                  echo "CommitLint from $FROM_HASH to $TO_HASH"
                  npx commitlint --from "$FROM_HASH" --to "$TO_HASH" --verbose

            # Step 2: Check and enforce Prettier formatting
            - name: Check Prettier formatting
              id: prettier-check
              run: |
                  if npx prettier --check .; then
                    echo "Files are properly formatted."
                    echo "needs_formatting=false" >> $GITHUB_ENV
                  else
                    echo "Prettier formatting required."
                    echo "needs_formatting=true" >> $GITHUB_ENV
                  fi

            - name: Configure Git and fetch branches
              if: env.needs_formatting == 'true'
              run: |
                  git config --global user.name "github-actions[bot]"
                  git config --global user.email "github-actions[bot]@users.noreply.github.com"

                  # fetch and set up local master branch
                  git fetch origin master:refs/remotes/origin/master
                  git branch master origin/master || true

            - name: Format files with Prettier
              if: env.needs_formatting == 'true'
              run: npx prettier --write .

            - name: Commit and push changes
              if: env.needs_formatting == 'true'
              run: |
                  echo "confirming branch existence:"
                  git remote -v
                  git branch -a

                  echo "enable husky debugging..."
                  HUSKY_DEBUG=1
                  git commit -am "refactor: format files with prettier"
                  git push
                  echo "Formatted and pushed changes."
